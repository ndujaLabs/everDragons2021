{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      "txHash": "0x3166849dc1409fde15cdfb43c815b61e72e5c5ace40457c37288fabda4c09f8c",
      "kind": "uups"
    },
    {
      "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
      "txHash": "0xbe3184e091d00d91f55e644efce56fe4fa18d781b2aacdbc16f80dddc76d600f",
      "kind": "uups"
    },
    {
      "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
      "txHash": "0xe9695e8838d41fce76e1ee87b6903f91fe6461351222a88c2f97a55ce4b84ad3",
      "kind": "uups"
    },
    {
      "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
      "txHash": "0xd514edb53ceb4b2f012dea5c28bea03271ef858e574101ca93d9220e4394cf4e",
      "kind": "uups"
    },
    {
      "address": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
      "txHash": "0xb230f318ad64565f16dc51e442a86a31370f61f9576de8ba4c2b77291ad3a7b9",
      "kind": "uups"
    },
    {
      "address": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
      "txHash": "0x4dec89470768deb70fa63e73cbdeac1445c9d0892d434fa85fcbcb3196acafbb",
      "kind": "uups"
    }
  ],
  "impls": {
    "e3cff87726f048dbf28e6999fff12bde8e2bca1436bb2d9251c05af8e54e98c6": {
      "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "txHash": "0x03b1131a9f22a870ad7684a981f33483ab12738662ed876f76f7c2cf23d7ac06",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721PlayableUpgradeable",
            "label": "_attributes",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Attributes)284_storage))",
            "src": "@ndujalabs/erc721playable/contracts/ERC721PlayableUpgradeable.sol:14"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:35"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "NFTState",
            "label": "_wormholeState",
            "type": "t_struct(State)6386_storage",
            "src": "contracts/Wormhole/NFTState.sol:7"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "EverDragons2",
            "label": "manager",
            "type": "t_address",
            "src": "contracts/EverDragons2.sol:23"
          },
          {
            "contract": "EverDragons2",
            "label": "_mintEnded",
            "type": "t_bool",
            "src": "contracts/EverDragons2.sol:24"
          },
          {
            "contract": "EverDragons2",
            "label": "_baseTokenURIFrozen",
            "type": "t_bool",
            "src": "contracts/EverDragons2.sol:25"
          },
          {
            "contract": "EverDragons2",
            "label": "_baseTokenURI",
            "type": "t_string_storage",
            "src": "contracts/EverDragons2.sol:27"
          },
          {
            "contract": "EverDragons2",
            "label": "_lastTokenId",
            "type": "t_uint256",
            "src": "contracts/EverDragons2.sol:28"
          },
          {
            "contract": "EverDragons2",
            "label": "_teamWallets",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/EverDragons2.sol:30"
          },
          {
            "contract": "EverDragons2",
            "label": "_isMinted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/EverDragons2.sol:32"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_struct(State)6386_storage": {
            "label": "struct NFTStorage.State",
            "members": [
              {
                "label": "wormhole",
                "type": "t_address_payable"
              },
              {
                "label": "chainId",
                "type": "t_uint16"
              },
              {
                "label": "completedTransfers",
                "type": "t_mapping(t_bytes32,t_bool)"
              },
              {
                "label": "nftContracts",
                "type": "t_mapping(t_uint16,t_bytes32)"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint16,t_bytes32)": {
            "label": "mapping(uint16 => bytes32)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(Attributes)284_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IERC721Playable.Attributes))"
          },
          "t_mapping(t_address,t_struct(Attributes)284_storage)": {
            "label": "mapping(address => struct IERC721Playable.Attributes)"
          },
          "t_struct(Attributes)284_storage": {
            "label": "struct IERC721Playable.Attributes",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "attributes",
                "type": "t_array(t_uint8)31_storage"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint8)31_storage": {
            "label": "uint8[31]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    }
  }
}
